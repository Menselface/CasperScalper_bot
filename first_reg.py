from datetime import datetime

from aiogram import Router, Bot, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.serialization import deserialize_telegram_object_to_python

from config import ADMIN_ID
from db import *
from keyboards import trial_keyboard
from utils.user_api_keys_checker import validation_user_keys

registration_states_router = Router()


class RegistrationStates(StatesGroup):
    access_key_state = State()
    secret_key_state = State()


async def handle_start(message: Message, bot: Bot):
    user_id = message.from_user.id
    username = "–ù–µ—Ç"
    first_name = "–ù–µ—Ç"
    last_name = "–ù–µ—Ç"
    date_time = datetime.datetime.now()
    date_time = date_time.replace(second=0, microsecond=0)
    specific_date = datetime.datetime(1990, 1, 1, 23, 59)
    text, status_of_expired = await check_status_of_registration(message)
    access_key = await get_access_key(user_id)
    message_json = json.dumps(deserialize_telegram_object_to_python(message))
    
    if message.from_user.first_name:
        first_name = message.from_user.first_name
    if message.from_user.last_name:
        last_name = message.from_user.last_name
    if message.from_user.username:
        username = f'@{message.from_user.username}'
    
    if not await user_exist(user_id):
        await add_user(user_id, first_name, last_name, username, date_time, specific_date)
        admin_message = (
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!"
            f"\n\n{date_time.strftime('%d.%m.%Y %H:%M')}\nID: {user_id}\n"
            f"–ò–º—è: {first_name}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}"
        )
        await message.answer(text, parse_mode='HTML', reply_markup=trial_keyboard())
        await bot.send_message(ADMIN_ID, admin_message, parse_mode='HTML')
        await bot.send_message(ADMIN_ID2, admin_message, parse_mode='HTML')
        await set_first_message(user_id, message_json)
    else:
        timestamp = await get_timestamp_of_registration(user_id)
        user_message = f"–ü—Ä–∏–≤–µ—Ç, {first_name}.\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã {timestamp}"
        if not access_key:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ /registration", parse_mode='HTML')
            return
        
        await bot.send_message(user_id, user_message, parse_mode='HTML')
        await message.answer(text, parse_mode='HTML')


async def handle_registration(message: Message, state: FSMContext):
    access_key = await get_access_key(message.from_user.id)
    text, _ = await check_status_of_registration(message)
    if access_key:
        await message.answer(text, parse_mode='HTML')
        return
    text, status_of_expired = await check_status_of_registration(message)
    if not status_of_expired:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞ –±–∏—Ä–∂–µ MEXC.COM –≤ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ API –∫–ª—é—á–∏ ",
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        await message.answer(
            "<b>–í–≤–µ–¥–∏ Access Key (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ mx‚Ä¶):</b>",
            parse_mode='HTML'
        )
        
        await state.set_state(RegistrationStates.access_key_state)
        return
    else:
        await message.answer(text, parse_mode='HTML')


@registration_states_router.callback_query(F.data.startswith('set_trial_promo'))
async def set_trial_for_user(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback_query.from_user.id
    user_first_trial = await user_get_any(user_id, trial_promo="trial_promo")
    today = datetime.datetime.now()
    if user_first_trial:
        await bot.send_message(
            chat_id=user_id,
            text="–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ\n\n"
        )
        return
    today = datetime.datetime.now()
    trial_period = (today + timedelta(days=7)).replace(hour=23, minute=59, second=0, microsecond=0)
    await user_update(user_id, registered_to=trial_period)
    await callback_query.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üéâ", show_alert=True)
    await user_update(user_id, trial_promo=True)
    await handle_registration(callback_query.message, state)


@registration_states_router.message(StateFilter(RegistrationStates.access_key_state))
async def handle_access_key(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await set_access_key(user_id, message.text.strip())
    await state.clear()
    await message.answer("<b>–í–≤–µ–¥–∏ Secret Key:</b>", parse_mode='HTML')
    await state.set_state(RegistrationStates.secret_key_state)


@registration_states_router.message(StateFilter(RegistrationStates.secret_key_state))
async def handle_secret_key(message: Message, state: FSMContext, bot: Bot):
    text, _ = await check_status_of_registration(message)
    user_id = message.from_user.id
    username = message.from_user.username or user_id
    await set_secret_key(user_id, message.text.strip())
    await state.clear()
    user_api_keys = await get_access_key(user_id)
    user_secret_key = await get_secret_key(user_id)
    check_api_keys = await validation_user_keys(user_api_keys, user_secret_key)
    if not check_api_keys:
        admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        await bot.send_message(user_id, f'–û—à–∏–±–∫–∞ –≤ –∞–ø–∏ –∫–ª—é—á–∞—Ö, —Å–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @AlisaStrange.')
        await bot.send_message(ADMIN_ID, admin_message, parse_mode='HTML')
    else:
        await message.answer(text, parse_mode='HTML')


async def check_status_of_registration(message: Message) -> tuple[str, bool]:
    """–Ø –¥–æ–±–∞–≤–∏–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
        –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è False, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ '–°—Ç–∞—Ä—Ç' –∏ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.
    """
    
    user_id = message.from_user.id
    expired_timestamp = await get_timestamp_end_registration(user_id)
    timestamp = await get_timestamp_of_registration(user_id)
    date_time = datetime.datetime.now()
    date_time = date_time.replace(second=0, microsecond=0)
    user_message2 = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.\n\n"
        f"<b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:</b>\n"
        f"¬´–Ø –æ—Å–æ–∑–Ω–∞—é –≤—Å–µ —Ä–∏—Å–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –ø—Ä–∏–Ω–∏–º–∞—é –∏—Ö –Ω–∞ —Å–µ–±—è –∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –º–æ–≥—É —Å—Ç–∞—Ç—å —Ö–æ–ª–¥–µ—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã¬ª\n"
        f"–ê–∫—Ç–∏–≤–∏—Ä—É—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥, —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –∏ –≥–æ—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ë–æ—Ç–∞\n"
        f"‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n\n"
    )
    
    if not expired_timestamp:
        return f"<b>Infinity Bot Pro</b>\n\n{user_message2}", False
    elif expired_timestamp < date_time:
        return f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ: {expired_timestamp}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚û°Ô∏è @AlisaStrange\n\n<b>–ü–æ—Å–ª–µ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –æ–ø–ª–∞—Ç—ã, –∂–º–∏ ‚û°Ô∏è  /registration  ‚¨ÖÔ∏è</b>\n", False
    else:
        return f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ ‚Äì {expired_timestamp}\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π —Å–ø–æ—Ç–æ–≤—ã–π —Å—á—ë—Ç –Ω–∞ Mexc.com USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ, —Ç–æ—Ä–≥–æ–≤–∞—Ç—å ‚Äì –∂–º–∏\n–ú–µ–Ω—é - /parameters –∏ –°–¢–ê–†–¢ - /trade", True