import asyncio
import os
import shutil

from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from loguru import logger

from db import is_admin_checker, set_reset_autobuy, all_users_with_reset_status, get_first_message
from keyboards import admin_keyboard
from trading import is_working, handle_autobuy

admin_router = Router()


async def handle_admin(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    if not user_id in all_admins:
        return
    
    mes = await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω ‚úåÔ∏è", reply_markup=admin_keyboard())
    await state.update_data(message=mes.message_id)


@admin_router.callback_query(F.data == 'refreshing')
async def refresh_all_users(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    res = await state.get_data()
    message_to_edit = res.get('message')
    if user_id not in all_admins:
        return
    mes = await bot.edit_message_text(
        chat_id=user_id,
        message_id=message_to_edit,
        text=(
            "–û–±–Ω–æ–≤–∏–º—Å—è?\n"
            "–ö–æ–º–∞–Ω–¥–∞ <b>–û–ë–ù–û–í–ò–¢–¨</b> –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤—Å–µ—Ö, —É –∫–æ–≥–æ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–±–∞–π, –≤ —Å—Ç–∞—Ç—É—Å 1.\n"
            "–ö–æ–º–∞–Ω–¥–∞ <b>–ö–û–õ–ë–ê–°–ê</b> –∑–∞–ø—É—Å—Ç–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ–±–∞–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 1.\n\n"
            "<b>–ü–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
            "1. –ù–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ì–∏—Ç–•–∞–± ‚Äî (–¥–∞–π –∫–æ–º–∞–Ω–¥—É <code>git pull origin master</code>)\n"
            "2. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–û–ë–ù–û–í–ò–¢–¨</b> ‚¨áÔ∏è\n"
            "3. –û—Å—Ç–∞–Ω–æ–≤–∏ –ë–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚Äî <code>Ctrl+C</code>\n"
            "4. –ó–∞–ø—É—Å—Ç–∏ –ë–æ—Ç–∞ ‚Äî <code>python3 main.py</code>\n"
            "5. –ù–∞–∂–º–∏ <b>–ö–û–õ–ë–ê–°–ê</b>"
        ),
        reply_markup=admin_keyboard(level=1))
    await state.update_data(message=mes.message_id)

@admin_router.callback_query(F.data == 'back_to_admin')
async def refresh_all_users(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    result = await state.get_data()
    message_to_edit = result.get('message')
    if not user_id in all_admins:
        return
    await bot.edit_message_text(chat_id=user_id,
                                message_id=message_to_edit,
                                text="–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω ‚úåÔ∏è",
                                reply_markup=admin_keyboard(level=0))
    
    
@admin_router.callback_query(F.data == 'refresh')
async def refresh_all_users(message: Message, bot: Bot):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    if not user_id in all_admins:
        return
    active_users = is_working.user_autobuy_status
    logger.info(f"{active_users} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å 1")
    await bot.send_message(user_id,
                           "1. –ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –≥–æ—Ç–æ–≤!\n"
                           "2. –û—Å—Ç–∞–Ω–æ–≤–∏ –ë–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n"
                           "‚û°Ô∏è CTRL+C –∏–ª–∏ CTRL+Z"
                           )

    for user in active_users:
        await set_reset_autobuy(user, 1)


@admin_router.callback_query(F.data == 'restart')
async def rstart_autobuy(message: Message, bot: Bot):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    if not user_id in all_admins:
        return
    await bot.send_message(user_id, '–ö–æ–ª–±–∞—Å–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ - üëç –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω !')
    
    active_users = await all_users_with_reset_status()
    
    tasks = []
    
    for user in active_users:
        res = await get_first_message(user)
        task = asyncio.create_task(handle_autobuy(res, bot))
        tasks.append(task)
    
    await asyncio.gather(*tasks)
    await bot.send_message(user_id, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã!")


@admin_router.callback_query(F.data == 'get_logs')
async def get_logs(message: Message, bot: Bot):
    user_id = message.from_user.id
    all_admins = await is_admin_checker(user_id)
    if not user_id in all_admins:
        return
    log_file = f'logs/logers.log'
    temp_log_file = f'logs/logers_—Åopy.log'
    shutil.copy(log_file, temp_log_file)
    user_agreements = FSInputFile('logs/logers_—Åopy.log', filename='logers_—Åopy.log')
    try:
        await bot.send_document(user_id, user_agreements)
        os.remove(temp_log_file)
    except Exception as e:
        logger.warning(f"{e}")
        await message.answer(f"–ù–µ –º–æ–≥—É —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª {e}")
    